apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'realm-android'

kotlin {
    experimental {
        coroutines 'enable'
    }
}

android {
    buildToolsVersion rootProject.buildToolsVersion
    compileSdkVersion rootProject.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion

        multiDexEnabled true

        versionName rootProject.versionName
        versionCode rootProject.versionCode

        resValue "integer", "xikolo_api_version", rootProject.xikoloApiVersion.toString()
        resValue "integer", "realm_schema_version", rootProject.realmSchemaVersion.toString()
    }

    productFlavors.all {
        ext.appName = null
        ext.appHost = null
    }

    flavorDimensions "brand"

    productFlavors {
        openHPI {
            applicationId "de.xikolo.openhpi"
            buildConfigField "de.xikolo.config.BuildFlavor", "X_FLAVOR", "de.xikolo.config.BuildFlavor.OPEN_HPI"
            appName = "openHPI"
            appHost = "open.hpi.de"
        }
        openSAP {
            applicationId "de.xikolo.opensap"
            buildConfigField "de.xikolo.config.BuildFlavor", "X_FLAVOR", "de.xikolo.config.BuildFlavor.OPEN_SAP"
            appName = "openSAP"
            appHost = "open.sap.com"
        }
        moocHouse {
            applicationId "de.xikolo.moochouse"
            buildConfigField "de.xikolo.config.BuildFlavor", "X_FLAVOR", "de.xikolo.config.BuildFlavor.MOOC_HOUSE"
            appName = "mooc.house"
            appHost = "mooc.house"
        }
        openWHO {
            applicationId "de.xikolo.openwho"
            buildConfigField "de.xikolo.config.BuildFlavor", "X_FLAVOR", "de.xikolo.config.BuildFlavor.OPEN_WHO"
            appName = "OpenWHO"
            appHost = "openwho.org"
        }
    }
    signingConfigs {
        if (rootProject.file('signing.properties').exists()) {
            def props = new Properties()
            props.load(new FileInputStream(rootProject.file('signing.properties')))
            openHPI {
                storeFile rootProject.file(props.RELEASE_STORE_FILE)
                storePassword props.RELEASE_STORE_PASSWORD
                keyAlias props.RELEASE_KEY_ALIAS_OPENHPI
                keyPassword props.RELEASE_KEY_PASSWORD_OPENHPI
            }
            openSAP {
                storeFile rootProject.file(props.RELEASE_STORE_FILE)
                storePassword props.RELEASE_STORE_PASSWORD
                keyAlias props.RELEASE_KEY_ALIAS_OPENSAP
                keyPassword props.RELEASE_KEY_PASSWORD_OPENSAP
            }
            moocHouse {
                storeFile rootProject.file(props.RELEASE_STORE_FILE)
                storePassword props.RELEASE_STORE_PASSWORD
                keyAlias props.RELEASE_KEY_ALIAS_MOOCHOUSE
                keyPassword props.RELEASE_KEY_PASSWORD_MOOCHOUSE
            }
            openWHO {
                storeFile rootProject.file(props.RELEASE_STORE_FILE)
                storePassword props.RELEASE_STORE_PASSWORD
                keyAlias props.RELEASE_KEY_ALIAS_OPENWHO
                keyPassword props.RELEASE_KEY_PASSWORD_OPENWHO
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled true
            debuggable false
            buildConfigField "de.xikolo.config.BuildType", "X_TYPE", "de.xikolo.config.BuildType.RELEASE"

            if (rootProject.file('signing.properties').exists()) {
                productFlavors.openHPI.signingConfig signingConfigs.openHPI
                productFlavors.openSAP.signingConfig signingConfigs.openSAP
                productFlavors.moocHouse.signingConfig signingConfigs.moocHouse
                productFlavors.openWHO.signingConfig signingConfigs.openWHO
            }
        }
        debug {
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled false
            debuggable true
            buildConfigField "de.xikolo.config.BuildType", "X_TYPE", "de.xikolo.config.BuildType.DEBUG"

            applicationIdSuffix '.debug'
            versionNameSuffix '-DEBUG'
        }
    }
    applicationVariants.all { variant ->
        def name = variant.productFlavors.get(0).ext.appName
        def host = variant.productFlavors.get(0).ext.appHost
        if (variant.buildType.name == "debug") {
            name += ".debug"
        }
        variant.resValue "string", "app_name", name
        variant.resValue "string", "app_host", host
        variant.resValue "string", "service_download", name + " Download Service"
    }
    lintOptions {
        abortOnError false
        disable 'MissingTranslation'
        disable 'ExtraTranslation'
        disable 'UnusedAttribute'
    }
    dexOptions {
        // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
        preDexLibraries = preDexEnabled && !travisBuild
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

apply from: 'dependencies.gradle'
