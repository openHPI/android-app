apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'realm-android'
apply plugin: 'io.fabric'
apply plugin: 'org.jlleitschuh.gradle.ktlint'

android {
    buildToolsVersion rootProject.buildToolsVersion
    compileSdkVersion rootProject.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion

        multiDexEnabled true

        versionName rootProject.versionName
        versionCode rootProject.versionCode

        resValue "integer", "xikolo_api_version", rootProject.xikoloApiVersion.toString()
        resValue "integer", "realm_schema_version", rootProject.realmSchemaVersion.toString()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    productFlavors.all {
        ext.appName = null
        ext.appHost = null
    }

    flavorDimensions "brand"

    productFlavors {
        openhpi {
            applicationId "de.xikolo.openhpi"
            appName = "openHPI"
            appHost = "open.hpi.de"
            resConfigs "en", "de"
        }
        opensap {
            applicationId "de.xikolo.opensap"
            appName = "openSAP"
            appHost = "open.sap.com"
            resConfigs "en", "de"
        }
        moochouse {
            applicationId "de.xikolo.moochouse"
            appName = "mooc.house"
            appHost = "mooc.house"
            resConfigs "en", "de"
        }
        openwho {
            applicationId "de.xikolo.openwho"
            appName = "OpenWHO"
            appHost = "openwho.org"
            resConfigs "en"
        }
    }

    def signingFile = rootProject.file('signing.properties')
    def signingProperties = new Properties()
    signingProperties.load(new FileInputStream(signingFile))

    signingConfigs {
        if (signingProperties.RELEASE_STORE_FILE != null) {
            def keystoreFile = rootProject.file(signingProperties.RELEASE_STORE_FILE)
            def keystorePassword = signingProperties.RELEASE_STORE_PASSWORD

            openhpi {
                storeFile keystoreFile
                storePassword keystorePassword
                keyAlias signingProperties.RELEASE_KEY_ALIAS_OPENHPI
                keyPassword signingProperties.RELEASE_KEY_PASSWORD_OPENHPI
            }
            opensap {
                storeFile keystoreFile
                storePassword keystorePassword
                keyAlias signingProperties.RELEASE_KEY_ALIAS_OPENSAP
                keyPassword signingProperties.RELEASE_KEY_PASSWORD_OPENSAP
            }
            moochouse {
                storeFile keystoreFile
                storePassword keystorePassword
                keyAlias signingProperties.RELEASE_KEY_ALIAS_MOOCHOUSE
                keyPassword signingProperties.RELEASE_KEY_PASSWORD_MOOCHOUSE
            }
            openwho {
                storeFile keystoreFile
                storePassword keystorePassword
                keyAlias signingProperties.RELEASE_KEY_ALIAS_OPENWHO
                keyPassword signingProperties.RELEASE_KEY_PASSWORD_OPENWHO
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled true
            debuggable false

            if (signingProperties.RELEASE_STORE_FILE != null) {
                productFlavors.openhpi.signingConfig signingConfigs.openhpi
                productFlavors.opensap.signingConfig signingConfigs.opensap
                productFlavors.moochouse.signingConfig signingConfigs.moochouse
                productFlavors.openwho.signingConfig signingConfigs.openwho
            }
        }
        debug {
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled false
            debuggable true

            applicationIdSuffix '.debug'
            versionNameSuffix '-DEBUG'
        }
    }
    applicationVariants.all { variant ->
        def name = variant.productFlavors.get(0).ext.appName
        def host = variant.productFlavors.get(0).ext.appHost
        if (variant.buildType.name == "debug") {
            name += ".debug"
        }
        variant.resValue "string", "app_name", name
        variant.resValue "string", "app_host", host
        variant.resValue "string", "service_download", name + " Download Service"
    }
    lintOptions {
        abortOnError false
        xmlReport true
        htmlReport false
    }
    dexOptions {
        // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
        preDexLibraries = preDexEnabled && !travisBuild
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

ktlint {
    android = true
    ignoreFailures = true
    reporters {
        reporter "checkstyle"
    }
}

apply from: 'dependencies.gradle'

// should be added at the bottom
apply plugin: 'com.google.gms.google-services'
